{"ast":null,"code":"import _classCallCheck from \"/Users/ryanlecoutre/Desktop/Intermediate JavaScript/React/2. React Apps/react-page-1/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ryanlecoutre/Desktop/Intermediate JavaScript/React/2. React Apps/react-page-1/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ryanlecoutre/Desktop/Intermediate JavaScript/React/2. React Apps/react-page-1/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ryanlecoutre/Desktop/Intermediate JavaScript/React/2. React Apps/react-page-1/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ryanlecoutre/Desktop/Intermediate JavaScript/React/2. React Apps/react-page-1/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ryanlecoutre/Desktop/Intermediate JavaScript/React/2. React Apps/react-page-1/src/App.js\";\nimport React, { Component } from 'react';\nimport uuid from 'uuid';\nimport $ from 'jquery';\nimport Projects from './Components/Projects';\nimport AddProject from './Components/AddProject';\nimport ToDos from './Components/ToDos';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n    _this.state = {\n      projects: [],\n      todos: []\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"getToDos\",\n    value: function getToDos() {\n      $.ajax({\n        // This is where we link to the external To-Do's API:\n        url: 'https://jsonplaceholder.typicode.com/todos',\n        dataType: 'json',\n        cache: false,\n        success: function (data) {\n          this.setState({\n            todos: data\n          }, function () {\n            console.log(this.state);\n          });\n        }.bind(this),\n        error: function error(xhr, status, err) {\n          console.log(err);\n        }\n      });\n    }\n  }, {\n    key: \"getProjects\",\n    value: function getProjects() {\n      this.setState({\n        projects: [{\n          id: uuid.v4(),\n          title: 'Example Website',\n          category: 'Examples'\n        }, {\n          id: uuid.v4(),\n          title: 'Example App',\n          category: 'Example Ting'\n        }, {\n          id: uuid.v4(),\n          title: 'Example Game',\n          category: 'Examples Innit'\n        }]\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.getProjects();\n      this.getToDos();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getToDos();\n    }\n  }, {\n    key: \"handleAddProject\",\n    value: function handleAddProject(project) {\n      // Set up a variable containing all the projects in the current state:\n      var projects = this.state.projects; // Then add the new project (that we passed in as a parameter for this function) to the variable list:\n\n      projects.push(project); // Then reset the state in order to display the new updated list, because states are IMMUTABLE (have to be deleted and then re-created in order to be updated):\n\n      this.setState({\n        projects: projects\n      });\n    }\n  }, {\n    key: \"handleDeleteProject\",\n    value: function handleDeleteProject(id) {\n      var projects = this.state.projects; // Checks which project's id matches the id of the delete button clicked, then adds this project to the 'index' variable:\n\n      var index = projects.findIndex(function (x) {\n        return x.id === id;\n      }); // Then we delete this 'index' variable (that contains the project that we want to delete) from the project list:\n\n      projects.splice(index, 1); // Then reset the state to display the new list:\n\n      this.setState({\n        projects: projects\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(AddProject, {\n        addProject: this.handleAddProject.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(Projects, {\n        projects: this.state.projects,\n        onDelete: this.handleDeleteProject.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), \"// Getting all these to-dos from an external API we linked in the ToDos.js file:\", React.createElement(ToDos, {\n        todos: this.state.todos,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/ryanlecoutre/Desktop/Intermediate JavaScript/React/2. React Apps/react-page-1/src/App.js"],"names":["React","Component","uuid","$","Projects","AddProject","ToDos","App","state","projects","todos","ajax","url","dataType","cache","success","data","setState","console","log","bind","error","xhr","status","err","id","v4","title","category","getProjects","getToDos","project","push","index","findIndex","x","splice","handleAddProject","handleDeleteProject"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport uuid from 'uuid';\nimport $ from 'jquery';\nimport Projects from './Components/Projects';\nimport AddProject from './Components/AddProject';\nimport ToDos from './Components/ToDos';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      projects: [],\n      todos: []\n    }\n  }\n\n\n  getToDos(){\n    $.ajax({\n      // This is where we link to the external To-Do's API:\n      url: 'https://jsonplaceholder.typicode.com/todos',\n      dataType: 'json',\n      cache: false,\n      success: function(data){\n        this.setState({todos: data}, function(){\n          console.log(this.state);\n        });\n      }.bind(this),\n      error: function(xhr, status, err){\n        console.log(err);\n      }\n    });\n  }\n\n  getProjects(){\n    this.setState({projects: [\n      {\n        id: uuid.v4(),\n        title: 'Example Website',\n        category: 'Examples'\n      },\n      {\n        id: uuid.v4(),\n        title: 'Example App',\n        category: 'Example Ting'\n      },\n      {\n        id: uuid.v4(),\n        title: 'Example Game',\n        category: 'Examples Innit'\n      }\n    ]});\n  }\n\n  componentWillMount(){\n    this.getProjects();\n    this.getToDos();\n  }\n\n  componentDidMount(){\n    this.getToDos();\n  }\n\n  handleAddProject(project){\n    // Set up a variable containing all the projects in the current state:\n    let projects = this.state.projects;\n    // Then add the new project (that we passed in as a parameter for this function) to the variable list:\n    projects.push(project);\n    // Then reset the state in order to display the new updated list, because states are IMMUTABLE (have to be deleted and then re-created in order to be updated):\n    this.setState({projects:projects})\n  }\n\n  handleDeleteProject(id){\n    let projects = this.state.projects;\n    // Checks which project's id matches the id of the delete button clicked, then adds this project to the 'index' variable:\n    let index = projects.findIndex(x => x.id === id);\n    // Then we delete this 'index' variable (that contains the project that we want to delete) from the project list:\n    projects.splice(index, 1);\n    // Then reset the state to display the new list:\n    this.setState({projects:projects})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AddProject addProject = {this.handleAddProject.bind(this)}/>\n        <Projects projects = {this.state.projects} onDelete = {this.handleDeleteProject.bind(this)}/>\n        <hr />\n        // Getting all these to-dos from an external API we linked in the ToDos.js file:\n        <ToDos todos = {this.state.todos}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}